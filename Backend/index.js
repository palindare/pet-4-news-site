const express = require("express");
const axios = require("axios");
const fs = require("fs");
const Database = require("better-sqlite3");
const cors = require("cors");

const app = express();
const port = 3001;

// –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è Next.js
app.use(cors({ origin: "http://localhost:3000" }));

// ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ SQLite —Å Google Drive
const fileId = "1TKQuEGz9-5XZic_QBRKhB3yhQXiPmVKi";
const fileUrl = `https://drive.google.com/uc?export=download&id=${fileId}`; 

// üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è SQLite —Ñ–∞–π–ª–∞
async function downloadFile(url, dest) {
  const writer = fs.createWriteStream(dest);

  try {
    const response = await axios({
      method: "get",
      url: url,
      responseType: "stream",
    });

    response.data.pipe(writer);

    return new Promise((resolve, reject) => {
      writer.on("finish", resolve);
      writer.on("error", reject);
    });
  } catch (error) {
    throw new Error("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: " + error.message);
  }
}

// üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite
async function fetchDataFromSQLite(dbPath) {
  const db = new Database(dbPath);

  try {
    const rows = db.prepare("SELECT * FROM articles").all();
    return rows;
  } catch (error) {
    throw new Error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è SQLite: " + error.message);
  } finally {
    db.close(); // ‚ùó –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º —Ñ–∞–π–ª–∞
  }
}

// üîπ API Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
app.get("/", async (req, res) => {
  const tempFilePath = "./temp.db";

  try {
    console.log("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞...");
    await downloadFile(fileUrl, tempFilePath);

    console.log("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite...");
    const data = await fetchDataFromSQLite(tempFilePath);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON –∫–ª–∏–µ–Ω—Ç—É
    res.json(data);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞:", error);
    res.status(500).json({ error: error.message || "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  } finally {
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (fs.existsSync(tempFilePath)) {
      fs.unlinkSync(tempFilePath);
      console.log("–§–∞–π–ª —É–¥–∞–ª–µ–Ω:", tempFilePath);
    }
  }
});

// üîπ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${port}`);
});
